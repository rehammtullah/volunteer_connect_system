




app.get("/logout",verifyUser, async (req, res) => {
    req.session.destroy((err) => {
        res.redirect('home');
    })
})








app.post("/forget_password", async (req, res, next) => {
    let email = req.body.email;
    const secret = 'hello secret' + email;
    const payload = {
        email: email,
    };
    const token = jwt.sign(payload, secret, {
        expiresIn: "15m"
    });
    const link = `http://localhost:5002/reset_password/${email}/${token}`;
    let mailOptions = {
        from: "dbmsproject09@gmail.com",
        to: `"${req.body.email}"`,
        subject: "Reset Password ",
        html: '<p>Please click on the following link to reset password and if you logged in your current browser, please logout to end the session and then continue with the registration :</p><br>' +
            `"${link}"` +
            '<br>mail generated by Helping Hands Website    --       copyright@dbms09',
    };
    transport.sendMail(mailOptions, function(error, info) {
        try {
            if (error) {
                //remove error here
                res.render("login", {
                    message: "Invalid Email"
                });
            } else {
                res.render("login", {
                    message: " Reset Link Sent to your Gmail Account"
                });
            }
        } catch (error) {}
    });
});
app.post("/reset_password", async (req, res, next) => {
    let password = req.body.password;
    try {
        let sql = `update register set password="${password}" where email="${req.session.resetuser}";`;
        db.query(sql, function(err, result) {
            if (err) {
                console.log(err);
                req.session.destroy((err) => {
                    res.render('login', {
                        message: "Try Again"
                    });
                })
            } else {
                req.session.destroy((err) => {
                    res.render('login', {
                        message: "password changed successfully"
                    });
                })
            }
        });
    } catch (error) {
        console.log(error.message);
    }
});
app.get("/reset_password/:email/:token", async (req, res) => {
   
    const {
        email,
        token
    } = req.params;
    const secret = 'hello secret' + email;
    try {
        const payload = jwt.verify(token, secret);
        let token1 = jwt.sign(email, "secret");
        res.cookie("access_token1", token1, { httpOnly: true })
        res.render("reset_password");
    } catch (error) {
        console.log(error.message);
        res.sendStatus(404);
    }

})

server.listen(port, () => {
    console.log("connected");
});